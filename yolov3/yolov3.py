# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vK03ytkWSpZL8DqvQhyLKG-9YHOgaP7a
"""

!apt autoremove cuda

!apt-get install cuda-10-0

from google.colab import drive
drive.mount('/content/drive')

!pip3 install tensorflow-gpu==1.13.1

!pip3 install imageai --upgrade

from imageai.Detection.Custom import DetectionModelTrainer

trainer = DetectionModelTrainer()
trainer.setModelTypeAsYOLOv3()
trainer.setDataDirectory(data_directory="drive/My Drive/sek")
trainer.setTrainConfig(object_names_array=["sek"], batch_size=4, num_experiments=100, train_from_pretrained_model="drive/My Drive/pretrained-yolov3.h5")
trainer.trainModel()

from imageai.Detection.Custom import CustomObjectDetection
import os

detector = CustomObjectDetection()
detector.setModelTypeAsYOLOv3()
detector.setModelPath("drive/My Drive/sek/models/model_50_0005_1.h5") 
detector.setJsonPath("drive/My Drive/sek/json/detection_config.json")
detector.loadModel()
accept_unlabel_directory = "drive/My Drive/accept/"
accept_label_directory = "drive/My Drive/accept_label_50/"
for filename in os.listdir(accept_unlabel_directory):
    filenameWithoutExtension, extension = os.path.splitext(filename)
    if extension == ".jpg":
        detections = detector.detectObjectsFromImage(input_image=accept_unlabel_directory + filename, output_image_path=accept_label_directory + filename)
        print(len(detections))
        #for detection in detections:
            #print(detection["name"], " : ", detection["percentage_probability"], " : ", detection["box_points"])

from imageai.Detection.Custom import CustomObjectDetection
import os
from shutil import copyfile

detector = CustomObjectDetection()
detector.setModelTypeAsYOLOv3()
detector.setModelPath("drive/My Drive/sek/models/model_50_0005_1.h5") 
detector.setJsonPath("drive/My Drive/sek/json/detection_config.json")
detector.loadModel()

accept_unlabel_directory = "drive/My Drive/accept/"
accept_label_directory = "drive/My Drive/accept_label_50/"
reject_unlabel_directory = "drive/My Drive/reject/"
reject_label_directory = "drive/My Drive/reject_label_50/"
accept_1_condition_directory = "drive/My Drive/accept_1_condition/"
reject_1_condition_directory = "drive/My Drive/reject_1_condition/"

MAX_PIXELS = 23
MIN_REJECT_KNOTS = 8

false_positives = 0
false_negatives = 0
negatives = 0
positives = 0

for filename in os.listdir(accept_unlabel_directory):
    filenameWithoutExtension, extension = os.path.splitext(filename)
    if extension == ".jpg":
        detections = detector.detectObjectsFromImage(input_image=accept_unlabel_directory + filename, output_image_path=accept_label_directory + filename)
        biggest_knot_axis_size = 0
        for detection in detections:
            x_size = detection['box_points'][2] - detection['box_points'][0]
            y_size = detection['box_points'][3] - detection['box_points'][1]
            knot_axis_size = max(x_size, y_size)
            if biggest_knot_axis_size < knot_axis_size:
                biggest_knot_axis_size = knot_axis_size
        if biggest_knot_axis_size > MAX_PIXELS:
            copyfile(accept_label_directory + filename, reject_1_condition_directory + filename)
            false_positives+=1
        else:
            copyfile(accept_label_directory + filename, accept_1_condition_directory + filename)
            positives+=1

for filename in os.listdir(reject_unlabel_directory):
    filenameWithoutExtension, extension = os.path.splitext(filename)
    if extension == ".jpg":
        detections = detector.detectObjectsFromImage(input_image=reject_unlabel_directory + filename, output_image_path=reject_label_directory + filename)
        biggest_knot_axis_size = 0
        for detection in detections:
            x_size = detection['box_points'][2] - detection['box_points'][0]
            y_size = detection['box_points'][3] - detection['box_points'][1]
            knot_axis_size = max(x_size, y_size)
            if biggest_knot_axis_size < knot_axis_size:
                biggest_knot_axis_size = knot_axis_size
        if biggest_knot_axis_size > MAX_PIXELS:
            copyfile(reject_label_directory + filename, reject_1_condition_directory + filename)
            negatives+=1
        else:
            copyfile(reject_label_directory + filename, accept_1_condition_directory + filename)
            false_negatives+=1

print("Positives: " + str(positives))
print("Negatives: " + str(negatives))
print("False positives: " + str(false_positives))
print("False negatives: " + str(false_negatives))